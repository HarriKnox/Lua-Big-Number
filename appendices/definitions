This appendix lists out the definitions of words frequently used in the
library.

Definitions:
 * Integer: A Lua value of type 'number' that has no decimal (x % 1 == 0).

 * Long: An integer that is larger than 32 bits when positive. An integer l
   is a long if l < -4294967295 or l > 4294967295.
 
 * 32-bit Integer: An integer that is non-negative and less than 2 ^ 32.
   
 * Word: A 32-bit integer interpreted as a Two's complement number.
   
 * Word-Array: A sequence (table/array) of numbers that follows these rules

   a) All numbers in the array are valid words.
      
   b) A zero-length array, or an array of all zeros, is logically equivalent
      to 0.
      
   c) The array is one-indexed (indices start at 1 not 0). If the array has
      a word 0 (array[0]), it will not be read. At a high level, the array
      is big-endian: array[1] is the most significant word; however, to the
      public the array is little-endian 0-indexed. Functions called by the
      user that take a bit or word index treat the index as a little-endian
      index: that is, bit 0 is the least significant bit.
      
   d) The array is interpreted as a Two's complement number: the sign of the
      word-array is determined by the sign the most significant word. If the
      first word is a negative Two's complement number, then the word-array
      will be considered negative: leading zeros will prevent the word-array
      from being interpreted as negative. Likewise, if the first element is
      not negative, the word-array will be considered not negative: leading
      sign bits [0xffffffff] will prevent the word-array from being
      interpreted as positive.
       * {   0xffff0000} = -65'536 (negative)
       * {0, 0xffff0000} = 4'294'901'760 (positive)
         
       * {            0x0000ffff} = 65'535 (positive)
       * {0xffffffff, 0x0000ffff} = -4'294'901'761 (negative)
      
   e) Note: For testing and iterating through word-arrays the default length
      operator (#) is used. A valid word-array must have a sequence of
      32-bit numbers for all indices between 1 and #array (that is to say
      for all 1 <= i <= #array, t[i] is a valid 32-bit integer). If there is
      any value that is not a 32-bit-integer in the range, it will fail the
      test. If #array == 0 then the word-array is still valid: it has a
      zero-length sequence and is thus equal to 0 (zero).

       * You could pass a table with a metatable with a custom __len
         metamethod, but you would probably need to modify the __index
         metamethod to ensure that for each integer i in [1, #array],
         array[i] is a 32-bit integer. Doing so could make some big
         word-arrays more space efficient. Suppose you needed a 76 followed
         by a million zero-words; you could modify the __len to say it's a
         1'000'001 words long, then modify the __index to say only index 1
         has a value `76` and indices 2 to 1'000'001 have values `0`, and
         all other indices have value `nil`.
      
   f) Note: Since a word-array is a table, it may have keys and values that
      are not in the sequence (such as t.name = 'Harri'). It is possible for
      someone to pass in any table/prototype/object and it will be
      interpreted as a word-array. Because of this, the only tables that
      would otherwise pass the word-array test will fail if they pass the
      biginteger test (word-array iff array of words and not biginteger):
      this is so tables that could be interpreted as bigintegers would be
      interpreted as bigintegers where they may have been interpreted as
      word-arrays.

 * Magnitude: A type of word-array with the following exceptions:

   a) All numbers are treated as unsigned (ignores negatives in
      Two's complement form).
       * {            0x0000ffff} = 65'535 (positive)
       * {0xffffffff, 0x0000ffff} = 18'446'744'069'414'649'855 (positive)
      
   b) Leading zeros are not allowed, and thus a magnitude of only zeros is
      not allowed. A zero-length magnitude is the only magnitude equal to 0.
      This ensures every magnitude is unique.
   
   c) Aside from the public function `constructorsignmagnitude`, magnitudes
      are completely internally used: all public functions that interpret
      arrays of words will interpret those arrays of words as word-arrays,
      not magnitudes.
   
 * Sign (different than the sign bit for a Two's complement number):
   Either -1, 0, or +1; determines whether the value is negative, zero, or
   positive, respectively.

    * A sign of +1 or -1 cannot be assigned to a value that is logically
      equivalent to 0 (zero). This is to avoid ambiguity in +0 and -0 and
      makes all zeros equivalent.

    * A sign of 0 cannot be assigned to a value that is not logically
      equivalent to 0 (zero). A non-zero magnitude with no sign is an
      illegal number.
   
 * Biginteger: A table with (at minimum) two fields (`sign` and `magnitude`)
   that are a valid sign and magnitude, such that every integer has a unique
   representation in the combination of sign and magnitude.
