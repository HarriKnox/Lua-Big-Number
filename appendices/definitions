This appendix lists out the definitions of words frequently used in the
library.



Integer
   A Lua value of type 'number' that has no decimal part (x % 1 == 0).
   
   In Lua 5.2 and prior, all numbers were internally handled as 64-bit floats
   (often called doubles). Because of this, there was no "integer" type,
   per-se. Now in Lua 5.3 and beyond there are internal integer types, but to
   maintain backwards-compatibility, the `type` function does not distinguish
   between them (both floats and integers are type 'number'). As a result there
   is no explicit "integer" type; most integers are just floats masquerading
   around as such. So long as we can treat it like an integer, then it must be
   an integer (duck-typng, yay!).



Byte
   An 8-bit integer.



Int, Word
   An unsigned 32-bit integer; in the range [0, 4294967295].
   
   Negative numbers can be treated as 32-bit integers if their positive value
   fits in 32-bits, but generally ints are treated as unsigned.



Long, Split-Long
   An unsigned integer that can be larger than 32 bits.
   
   Longs are usually 64-bits, but in this project they are any integer too
   large to fit in 32-bits. Because Lua's use of 64-bit floats, the largest
   integer you can get is 53-bits, so longs are often handled as two ints,
   called a "split long".



Array
   A table with sequential integer indices starting at 1.
   
   For testing and iterating through arrays the default length operator (#) is
   used. A valid array must have a sequence of non-nil elements for all indices
   between 1 and #array (that is to say for all 1 <= i <= #array, t[i] ~= nil).
   If #array == 0 then the array is still valid: it's just a zero-length array.

      You could create a table with a custom __len metamethod, but you would
      probably need to modify the __index metamethod to ensure that for each
      index in [1, #array], array[i] is non-nil. Doing so could make some big
      arrays more space efficient at the cost of added complexity in the
      planning department.
   
   Since an array is a table, it may have keys and values that are not in the
   sequence (such as t.name = 'Harri'). These will be treated as arrays looking
   at only the integer indices.
   
   A sub-array of an array is an array that contains a shallow copy of a
   contiguous range of elements of the parent array.



Word-Array
   An array where each entry is a valid word (int).

   A zero-length word-array or a word-array of all zeros are logically
   equivalent to zero (0).
   
   Generally, internally the word-array is big-endian one-indexed: word 0
   doesn't exist and word 1 is the most significant word. Externally
   (publically) the word-array is little-endian zero-indexed: word 0 is the
   least significant word, and bit 0 is the least significant bit.
   
   The array is interpreted as a Two's complement number: the sign of the whole
   word-array is determined by the sign the most significant word. If the first
   word is a negative Two's complement number, then the word-array will be
   considered negative. Likewise, if the first element is not negative, the
   word-array will be considered not negative. Leading zeros or leading sign
   bits [0xffffffff] will ensure the word-array is interpreted as non-negative
   or negative, respectively.
   
      {   0xffff0000} = -65'536 (negative)
      {0, 0xffff0000} = 4'294'901'760 (positive)
      
      {            0x0000ffff} = 65'535 (positive)
      {0xffffffff, 0x0000ffff} = -4'294'901'761 (negative)

   To be more space-efficient with large word-arrays you could use custom __len
   and __index metamethods. Suppose you needed a `76` followed by a million
   zero-words. Modify the __len to just return 1000001 (#array == 1000001).
   Modify the __index to say only index 1 has a value `76` and indices in the
   range [2, 1000001] have values `0`, and all other indices have value `nil`.
   
   Since a word-array is a table, it may have keys and values that are not in
   the sequence (such as t.name = 'Harri'). The only tables that would
   otherwise pass the word-array test will fail if they pass the biginteger
   test (word-array iff array of words and not biginteger): this is so tables
   that could be interpreted as bigintegers would be interpreted as bigintegers
   where they may have been interpreted as word-arrays.



Magnitude, Mag
   A type of word-array with the following exceptions:

   1. All numbers are treated as unsigned (ignores negatives in Two's
      complement form).
      
       * {            0x0000ffff} = 65'535 (positive)
       * {0xffffffff, 0x0000ffff} = 18'446'744'069'414'649'855 (positive)
      
   2. Leading zeros are not allowed, and thus a magnitude of only zeros is not
      allowed. A zero-length magnitude is the only magnitude equal to 0. This
      ensures every magnitude is unique.

   3. Aside from the public function `constructorsignmagnitude`, magnitudes are
      completely internally used: all public functions that interpret arrays of
      words will interpret those arrays of words as word-arrays, not
      magnitudes.
   
   A slice is a like a sub-array of the magnitude, but it will have its leading
   zeros stripped off.



Biginteger, Bigint
   A table with (at minimum) two fields (sign and magnitude).
   
   1. Sign is an integer that is either -1, 0, or +1. Sign determines whether
      the biginteger value is negative, zero, or positive, respectively.
   
   2. Magnitude is a valid magnitude as described above.
   
   
   Each real integer is intended to have a unique representation in
   sign-magnitude combination. As such there are two rules to ensure uniqueness
   and unambiguity.

   1. A sign of +1 or -1 cannot be assigned to a value that is logically
      equivalent to 0 (zero). This is to avoid ambiguity in +0 and -0 and
      makes all zeros equivalent.

   2. A sign of 0 cannot be assigned to a value that is not logically
      equivalent to 0 (zero). A non-zero magnitude with no sign is an
      illegal number.



Destructive
   An operation that modifies the array in-place.
   
   Destructive operations are usually more efficient than copying in space and
   speed and are used internally so the end-users don't need to worry about
   them.
